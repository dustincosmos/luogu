/*
题目描述
尼克每天上班之前都连接上英特网，接收他的上司发来的邮件，这些邮件包含了尼克主管的部门当天要完成的全部任务，每个任务由一个开始时刻与一个持续时间构成。

尼克的一个工作日为 nn 分钟，从第 11 分钟开始到第 nn 分钟结束。当尼克到达单位后他就开始干活，公司一共有 kk 个任务需要完成。如果在同一时刻有多个任务需要完成，尼克可以任选其中的一个来做，而其余的则由他的同事完成，反之如果只有一个任务，则该任务必需由尼克去完成，假如某些任务开始时刻尼克正在工作，则这些任务也由尼克的同事完成。如果某任务于第 pp 分钟开始，持续时间为 tt 分钟，则该任务将在第 (p+t-1)(p+t−1) 分钟结束。

写一个程序计算尼克应该如何选取任务，才能获得最大的空暇时间。

输入格式
输入数据第一行含两个用空格隔开的整数 nn 和 kk。

接下来共有 kk 行，每一行有两个用空格隔开的整数 pp 和 tt，表示该任务从第 pp 分钟开始，持续时间为 tt 分钟。

输出格式
输出文件仅一行，包含一个整数，表示尼克可能获得的最大空暇时间。

输入输出样例
输入 #1复制
15 6
1 2
1 6
4 11
8 5
8 1
11 5
输出 #1复制
4
说明/提示
数据规模与约定
对于 100\%100% 的数据，保证 1 \leq n \leq 10^4,1 \leq k \leq 10^4,1 \leq p \leq n,1 \leq p+t-1 \leq n1≤n≤10 
4
 ,1≤k≤10 
4
 ,1≤p≤n,1≤p+t−1≤n。
 */
#include<bits/stdc++.h>
using namespace std;
int ans[10001],d[10001];
struct data
{
    int s,t;
}f[10001];
bool cmp(data A,data B)
{
    return A.s>B.s;
}
int n,k,p,t;
int main()
{
    cin>>n>>k;
    for(int i=1;i<=k;i++)
    {
        cin>>f[i].s>>f[i].t;
        d[f[i].s]+=1;
    }
    sort(f+1,f+1+k,cmp);
    int count=k;
    for(int i=n;i>0;i--)
    {
        if(d[i]==0)
        {
            ans[i]=ans[i+1]+1;
        }
        else
            while(d[i]>0)
            {
                ans[i]=max(ans[i],ans[i+f[count-k+1].t]);
                k--;
                d[i]--;
            }

    }
    cout<<ans[1];
    system("pause");
    return 0;
}